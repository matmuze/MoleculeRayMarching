#pragma kernel CSMain

uniform float _VolumeSize;
Texture3D<float> _VolumeTextureIn;
RWTexture3D<float> _VolumeTextureOut;

#define KERNEL_RADIUS 1

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{	
	float input = _VolumeTextureIn[id.xyz];
	
	if(input == 0)
	{
		_VolumeTextureOut[id.xyz] = 0;
		return;
	}

	float atomVoidCount = 0;
	float voxelCount = 0;

	for(int x = - KERNEL_RADIUS; x <= KERNEL_RADIUS; x ++)
	{
		for(int y = - KERNEL_RADIUS; y <= KERNEL_RADIUS; y ++)
		{
			for(int z = - KERNEL_RADIUS; z <= KERNEL_RADIUS; z ++)
			{	
				voxelCount ++;
				if(_VolumeTextureIn[id.xyz + uint3(x,y,z)] == 0)  atomVoidCount ++;					
			}
		}
	}

	if(atomVoidCount == 0)
	{
		for(int x = - KERNEL_RADIUS; x <= KERNEL_RADIUS; x ++)
		{
			for(int y = - KERNEL_RADIUS; y <= KERNEL_RADIUS; y ++)
			{
				for(int z = - KERNEL_RADIUS; z <= KERNEL_RADIUS; z ++)
				{	
					_VolumeTextureOut[id.xyz + uint3(x,y,z)] = 1;				
				}
			}
		}
	}
}
